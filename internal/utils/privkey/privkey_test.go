package privkey

import (
	"os"
	"testing"

	"github.com/number571/go-peer/pkg/crypto/asymmetric"
)

const (
	tcTestdataPath       = "./testdata/"
	tcTestdataDirPath    = "./testdata/directory"
	tcPrivKeyPath        = tcTestdataPath + "priv.key"
	tcInvalidPrivKeyPath = tcTestdataPath + "invalid_priv.key"
	tcTmpPrivKeyPath     = tcTestdataPath + "tmp_priv.key"

	tcPrivKey = `PrivKey{}`
)

func testDeleteFile(f string) {
	os.RemoveAll(f)
}

func TestError(t *testing.T) {
	t.Parallel()

	str := "value"
	err := &SAppError{str}
	if err.Error() != errPrefix+str {
		t.Error("incorrect err.Error()")
		return
	}
}

func TestGetPrivKey(t *testing.T) {
	t.Parallel()

	testDeleteFile(tcTmpPrivKeyPath)
	defer testDeleteFile(tcTmpPrivKeyPath)

	privKey, err := GetPrivKey(tcPrivKeyPath)
	if err != nil {
		t.Error(err)
		return
	}
	if privKey.ToString() != asymmetric.LoadPrivKey(tcPrivKey).ToString() {
		t.Error("diff private keys")
		return
	}

	if _, err := GetPrivKey(tcInvalidPrivKeyPath); err == nil {
		t.Error("success get invalid private key")
		return
	}
	if _, err := GetPrivKey("./random/not_exist/path/57199u140291724y121291d1/priv.key"); err == nil {
		t.Error("success get private key with not exist directory")
		return
	}
	if _, err := GetPrivKey(tcTestdataDirPath); err == nil {
		t.Error("success get private key as directory")
		return
	}

	tmpPrivKey, err := GetPrivKey(tcTmpPrivKeyPath)
	if err != nil {
		t.Error(err)
		return
	}
	tmpPrivKeyX, err := GetPrivKey(tcTmpPrivKeyPath)
	if err != nil {
		t.Error(err)
		return
	}
	if tmpPrivKey.ToString() != tmpPrivKeyX.ToString() {
		t.Error("diff tmp private keys")
		return
	}
}
