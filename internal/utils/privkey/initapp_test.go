package privkey

import (
	"os"
	"testing"

	"github.com/number571/go-peer/pkg/crypto/asymmetric"
)

const (
	tcTestdataPath       = "./testdata/"
	tcTestdataDirPath    = "./testdata/directory"
	tcPrivKeyPath        = tcTestdataPath + "priv.key"
	tcInvalidPrivKeyPath = tcTestdataPath + "invalid_priv.key"
	tcTmpPrivKeyPath     = tcTestdataPath + "tmp_priv.key"

	tcPrivKey = `PrivKey{41821934195CB0F0CFCF475C6FA332AE79025C9250B572A35EB7359C836F7F6C680A560494778AAE821F29816F8DF0AFFBC21AC9D6BAFF13C5BD173282998939518C69D40625274B9B01427B8AB272607B4F6B1FB10A3E44FCBB0EA284EE9941D0F68B9AA07AD08699467CBBE2D077DB746ECCEC056A07261F130B0864785B11B285F31EAF19743E4C79020293B2A1344163CFD22531CCFCB9AC386F9C705A857B4BB4364016AC8C81D408E8730DBB459D3B898C6C34A1DC021329C45ECEE839B7782E1104877B8073EAE08CA140B6B7E0775B540231F8436EC795EB4167C28337D7F56EB128603E617737C9BAD9B236985C8C5A8A7FA5C05F2D7C42D6C41D4BBBA6F1B36E8DB5741AA0BBA676768327BD7815A86F084C7A92AB50124DD4453F016C32139848EFD993D4EC1E14D68137A697260B355F779A2B7B93E0CB137B1553C68C60C77AB8A0A5A7CC76AD5275162EF2B35C1B8A99CB8CC2F69BC6B5181BE3C82EB68BA0C02854791A4C5025F1741E2FEB30D915821C660A81C159F043539F88ABFE8444FD197863D761BEB5A1D22845D690504DC28A8B674E08D70F1467A5C2F1228CF1687C58134E364BF0DC34F81749CC427DE595C81429C7CE91094EBBCD5DB4A70C92BD6C856D412A4BE4CB0D147A7145432D87292CD20BBDA7ABC0945114DFC1768C394D3095888C451268775B79A0808F843D2096086509CDCC8945ED5B2C53269CC4865D5FB825AED576AFAC8EF6031A4B2A882CD98A5B2ABD16D025FB60488072A9F17C9A35531E0FF9C7DC63AA101B53F4F5B4CBF30CE39145419157590485B5006C2056A690E5BF184890A00A4A42A2BB9BE599899130B0F864F1297700A7071936BB34D679FFE9508630CD5FF0CA8D9878CCA692B5F8497A9B452A6CA6DB926E811370C2245AB4E042CC73897786426C6B07DBF8283065887265712C63188B57A59D260DE4E2941A3778B99375817B366EE8A9AE7C5421331A2E2BB01D293839A93E1F134213866AF2670A9DA3C901A2AF7FA401D7663C739A5061779530C886E4280662EC376A39C41E21946E94CE35D644A7E17A3CD07D0C80C703C143E3959FCD173E0B58B8846586459A6F7C537DC0C19496DB38258A8C8C11BDD0E165776777536656F54010D5C82FF9D3CC8CDC2E82B887D1AA95815A7ECC935426BA5BDFF94813B88AD2EC56C23370F3D046FE7587EFE27D14A65206503F673A75B722199E37CC472324B68B6ECD75B73AE4935A12C04A724D18B3C87BC1228E09082AA714F80913760C659BA54549376436D9544B17C0DAB88C19C49C4D67B45F807B82A12E4B3429D9DAC753635389E57D5AD90AFF6A6B3CB0CB29E458197A5CC91A858BB83FF17AB83274CA034CBC521772067C5F63286A39C908FFA66816F552D2580B0BFCB25ECCB9760C52ABB53806BCAD75291122221B552A3FC798AC7945B344846745B37B923805A345B2C6B94EB0233FE4490ABA9A4A67B157CC78565B20B0D6D559EBE9B9C807AA1573A85916B66EC077ACA491342A8DC08A607BF28DBCE793E52468BD022806145E51D9519B749FEE026117828792CBC1EA4031B63292AFE0B7534B01C84BB609F5BD85E8B28A326230950D77E3C15AE8CDF2C0BBA7B9A252C643F0828CC6186C0E9BBEFAEB4709229F35548C499C681082ACCE9B976A7B445534C7A605CCD8282DF82B596E66A465453F2F959BB3E3C368743D4E7B196A9B14F5C212DBF81F74987411C4C95FD6BE64C148544B0E3D18018EC2179A4ACC28734CB2492AB005484FA8A3FD0BCB9EC36DFDFC4F55B88A506B206E5A606E3794B0ABC5019BB739E05C11652F20B98078F9367BD6C39B72AF84520F9B975DBD3261487748CC1A55C58176C7013591E8316B1B980114BCCAD5B47943697587C0309C6BBB6502A6523ECC09331127369AEB1736063DAC39AFE4292D1EC71F86334335DC46B9AB2046A522F40C063D09434700AF9B300D1E187F6E633AB4C94ABB8A51AEA2AEE4B044EA18B3F9A82D8648438F3502FD805F462772F5D4B39133720D7653F001209977CBCF9B1A4F9853176555898696C7851FE78A072C4A313BB0AC1614BF0D72032E48118F4646A30719A502048499982555C700F40F116B3395C6817EE288FED29A82A91233411631889282A8A1B34CB80DAA2FE5B9BE103A0EC1C65A1C72BD8351CAFCC2CDE1AB5D9F458D80203E007026F0BA0EC7D471BF41B77FD79077544FFF358B3876A7FBE55335BC5EC7262FCA809ACFF541D86C424DA8BE727494D7C33FB9DA7C9A279715A50045CB2DCB5661C0B88FD641793E4CC21631024EDC5C86594B374B4C2CFB900C14253E6BC0EFCC811E880B93CCA3190904D9A97D04D864CAA7BCEF216D94214748F48EBD396FC168A284B50B390947FA73AF3EB52657B82B4D950296C7B9A0CA475EC37836FACD136466AC34BB58394C408980760A4190BA83E26C45BA8538B5A792F0092337A52A520AB03B66B61F7698324032D1840950E56E9A8517EDD724842124DE1BB70CB96EC2BB204AA222116C1B82743AD0B3663D05C9F84B0E53D3163F843D26022ED6591EA321ACB868117D1990232A1409521DD048736099CA17108DB2CA2A56DC8088F3632DF623A10344DC8A9AA4846FE1EB587D37AC5EC01E06016BCDBCB3E0004201796945E524DCC0BF9C9CB331D7C19BD60F6F72378F2C635FF2405C7585A5B4A26589048881B10E48B23B78A1043707DCA3A3F1D2725B0894EC986465936CD638740581155A83CE53E83B6E44CBD39801A6B431F26A1C61355193FA5C2550A4CA92B7338A06A602678FC576F6B97DB0D93415ABB27B64747C590DDC967AFFF500F9986B7BCCB9926871804507AF18974B10526EB3072269BE33567E05771372AB5A03063D878A8A73241B5A95108186C8EA2AA984D13A7A6776F9B662E9D58B321C81585149D6A1BE2D5B2DD5A2197D707855CCA4F620832544C16F2491330201AC9402222750FF05962CE106FD601416C8257FD0436010C8E6C924E19610931B6183868B2278464C3C6E1B114B7D180075F2ABDC386F1E49210D2862661384722C770311AF1054021C7168BF00882BDC0E4EB10D01E05AF677AD9EE7BADA361BC32779142A8489897033F5133AAA1FF4520526C79059BB4F2057369618475AB0A9E543AF4CD25D53392463BC1EC4C5BD7062CBF6752FE566C33D01A521B485D12067B9CA1588EC777DD250A4F95C85A80384E0AA29F3433C4032217A5EC7E705FF105440B41E6F2C92DBA50D3560EF8B9E6B9F77C2128DFCE7674B749C3EA8C8132C6CCB6B00877F970D8C0D994D053B895E2275FB27DD4660137ED383EA9727ECAA540957327EE75E08F782F8BAA3E5545C25E8DA10A5027F63A58581;41C6BCBD1F2ADE16F3FCD8A570C8DA0E85D4BFCBD2A3BE99BD2D6808ED3FA9EBF07084403BBA89BE721E7E24420D3E4784A2C4A1BAB905E262829C4378F321D322908A1F9E0011CEF810616E554384EAE442E0075FF4A1ADF1DCDCC66AD4C29C00708578731851656484836687406463115235157375054138833323023120526877473327358144721613711554413554565112318674685513805688544601553637655815444250820230570242603586686383213885003701600155813808336388017012443515027623881664017316322374572887340874015132454037205657350250414515426652485367255411573217646030256813783807644265381622756163640488358705277723776264061002821811744650301447225041810157445708810545254715247883845633088788572353841335733226635651445741126561234023730851483635476560154421612073024265443763063153508111775228277626273808555685325436481312770482225134347466013454746771481355874621753426376578702776732314033213563454230462375860672066286401750404054276663346350101853826722572770510073888625164507353815536605602268844626161587508088138266028007781242327234677550836571804531813246101170272147284588188123563252014303402668243243653070481528437123834513233768438765857818625683437167117712100471213584021832534588745115532462437338135403156202007402872126850774607642521288507863104670326764561257752041256202760216144705360470255104582641850773107717880738630474806814445031775432106424266625447880155636623807201483652522378674324854151316678083865416602502210083784233374312607413114258552437473840732178021108340223771024347533162038831004080438636783843838720344506131417372625205008223542826721884601705321681482184750468373535737824614006852802704184202818468753837072863276688881218827624303507460370470814568453746445133247740574111244025325342577187618661781718057225356274635450040851451305272837080140012777412855560280445377710468427882235102081275141773230444408630445003277431655531122847181771200008520052286601736607301623645636377640722611068178816430031700547303455430480075462206748877143088338436554345344037783567866812812255113458840212662523358657008543817853673181618672087888031388770327814704011557473683261257481844003541044710653032352323207243354460867804247376225841717783356428803416681713645686061350843012780057766835130800116341360378006034001440578083638248281777530413186445133515822236157570735356861367140015313372463757214486241028812718174152587057485381281236644256655210254643166747110758755184740474632225551575017748274677203375508785373611375313851054027388838410381020587114537554801025341653078717462103051820513152237843018443346013627400770523171822018736210281584876051511220182266512528430558488485742472228240782256563241475614025784656878730145115034838240330370327381636368221226465666544137703844586133664622104421550600080157233083281000845340512771804773081815448353603375477334608420825343038687611783364248587032652426634231337322661872328257702807875130527041583683248528188224581200073080033766403180787318013503234254848470331024607574403014522405853511322252320374218416682504038567466413670826870853155854351667816366425221BB47FD9063C08DE926FC912053ECBFAC1BBAD870AE04490F51E0A4600917E997B2DD0E4649C803B6E85848C41AA86558D506D37E8091BDB697613F0B9B076508BB7B342FDA7F83076165796C3700140EF9BADB2467937E03A656929E7FE4E8F674EF410D5364F48BE4020895567882BCA45B8883C248B63A1B22EA18A9A22BCED76EB5A58693F2D03D0360657D64636EC15BFC0704078033AE95B0C20BEFBE4B73C9519FF380FDE76686E38C3A927F1CB63240D0E508EE7F4B08721CDF858EB04A34AC8D3BD188CDD2D7A27909AFCD6FABD1DE4058ED6D4CD229F63A65249FD85973E1993F5E38741149446D20A47831ABE792C6E474C3E61E6DC3805CCA2D185F79F3137EBD0C705634016BF5DC4B86AE32011CF9C2C3218C842D8023DC10109F8D244193954F7C32FC7D50435D5E0FD5385CE93A16599C9E2B5C078FDA134A598A58E7318C31BB0586B7B843378F4AE1D1D1AC6A653DE8F23B12477BBBC5E7E15E827BA560287A183B22CCC5694C67389CAB0A0EE2D1CE8983668CC43385349D25D65030EAB987A2D2DF53137F6218F18FE278D502C7CD82602851F97B81F80011EE52EC19EC6FDF3A05AEDF056DBEC636C0F88E31C3A94D219953BD26FE4CCE841C889CBD6ABE8DC5A1A0DD4BA2BF8F495F0BD36B4F6FE072FA332F0182CA8C24323AAFBF1CC2951A306D4CA7831AB5181CACB291DCE6CF8A6880054EA4D1520446C98B4CA8FFFAC4181FA14F907D6BCF95FB9004AFA9B8A7F8599813C6EE72211C101081C0F919F2BFF64C82D308989B2962A0A045C70E6F47675E3B005C055CD5DAB33AF01AD5559F54D865AA3D9D616DF8EB8197A8FFD8E136365BBE34E9705AD05B75D520749B4F754C8D20BCA85BFEF5DA4D29508062B658AC60DC0B01F6B932C611733E6168000F61339A4B2CC44E982D5D26BE009098B6DDC53DDE3B40B69AA703D3B02BB93C3F4E78DDD5F76B35E046E3A5F1A3C7B5783CBA0791C60419159B84866CA9F48D93F62BFC563EB357F22E9C88A0CBB80C2B92E69DE078E0D97BB7C4272426A40D236D0677465B7428FA5E225D954C1F96F491F6C2F104EA48FC1202765635D071E980C97F50F72DF9394DEDA2FB3FC4FF45ABECCAF12CF680BB277B872CEFC3D1F7E6CD1403080DB20C6B2E29EF0A782FD9F2FDFF7DFFC91BF36B8F4BABC53B133AD3ECB1A18A9C208E71FCDCDDB82B1900B912F9F73EBA5443DB1282A070CFC13DC262B2728A2BE0049445492347492681BC37C63BC0F2AF923AE6C1FB7EE4A17FCA572FD0AEDCBAF6C88502DB1CD61C3B62742CA093305CCFCEB3E13895F056CCF8C394F5FADC930744ADD500AF4CDB0DA66485168BA385A3B50ED6CC791C568BAF579F42493EA246B9E8F95E36F090B342F862E5FCFD5774DA3B05C1BD495A9C62345358C1D13175D528DA717BB7E2AE622ECD6C1778B910DE8FB0B66361173351105CC2845705E4B2F43270394551AD334AEE68872F936AB7C5DD8212195B85DD729D359C5D6DD3F3224B713549C84FD352739C12F95BD4592421B62769992B1746360C52C4AC109EA1CE6D1244A217E9D05A7FFAEDA6E91CCBF5C7B310D58BF69A341A521985D44EFC9790DA6148E9FC413001112C09D193DF10D36D461C98381874403340AF57C90E08621DEEDD89C05D037D480DB93723C3DFD2CE4B2BA8248D0CD2783A68B38781160584DC06F3CC3C04D07C9D12CC9F2C9F8D2B9E32F487A4F0A086FAEFB18199347CA62C2E7A3504568CDCD81A7E36DA279FADE543BD093BF50CA1D892A7ECCCB65261B1913366DC1C204759842A1CFB0A72F0A5924166C7F6DFAB1FC804A5E9C3DD1D54AA3C60D585A1889E49B522DF3C8254E12B35C260062846E52C8966E437C5EEBBC24F20AA2C495A4030EBD796CC2A8AAD8BB7C5E7F30A779E5E5B23945FC43B02601E8FD1BC1471922C6AD083DE3D0C892E75625926519AFCC86F2506786719CB9698B51A1BE8F86B240FC6F9D2C08C243C8CB978FF43F0B687755F84DFD7B75DF3E62E859C62AF1A1265703C004FFDE972DA49995D9F00F0CE56AF142230C36F9BE204C58A0814B90DA04B910347A2E16E3EC959650B4A8D45CEF0D56F5777C1227AEDC3CDA727B15CB127B430ECD7D63A0E24DAB2850D03B8777383979393564ADB00F6D896F1BBE1E679808C83BB9BAC1C25B92F08A6B0740A156B59EDBF90077B965718400BCB667FD74E84B284034FAEDCB187A64720409F50ACFF33F123FBE2F15BCB4785F7C24E1DDCFEF714FADB416D258D64EC7354BCE3EA958C5D5AF231B4135D982637E5C238342D27CB5B2FDA5836046F54D9326BA69CE1ECDA1D744B9521EC2331070E20249C0DC4ECCEF477E4B77C45ECAE85894946AD05FB8AA342119C523FB72EB1C0F615D7BB0287BEA7ABE9B344BF2048C7F3B45BE6BFC7C14FC43AB56EF65E30CFA88FCA524F7F903FDC09BDD3246578FDA58090CFB763BA46F621020E9E0783589725804C0576424B1F56801EB767669358268A67C0F0C88FFE73D613EC8B8318EBBDB821B7AB5928DCAA456BB38716ACDEC559596E45318FC5F66B565504FA020BD9543864532B0C41F2AAA3F8A10DD34331F00111B21CA8A6F4D5C50F75E5A9CADD5E43F748775236450BAB9F533BCBAF0A7F0F38A7EDF0A9DA21278F9677E248093134E2DE7C281B1AB47E2362F34339253B236328A0BB7F232199B65EF3606E737D04D500CD7301BE8110B312B349C080D79F90062F734C11B5CCACDBE65CF4542B440D98D1D2D445FC320FD7AFE766F117BD7C242058F49A107276026903F38E22284A9F82EC34E90517A16712E5AB6F37F2DF1BEECD055A3ED64C4BCB3E5DEAC0D3AEE5D7F3137A638A91518CE3B8DF9B4405FA94A9868B55B56D61620738FB0ACF7AEDEB6200CC79D34DD879FC5F83EFB461C85CD9955BB28DF45C6C2055D9A061EAAA79F4C61FC3AB79989B78094547D9F4983EF70D576AFD863228208D29201567AC78B84378F9526305968D8FA632F7981E90139095910A12CC454B069C40E78D5E18201EC74EEBF6403D7BFD92DF75E6034C0CACBC22AB9D0E1FBC48BA3968969A17D29767E0A53A6E78FDEC08AF6F3ADBA070F75AB2A940214351797C437F035C200D7D45F80ED2D768230740C802659391F7002D4FD1526DD4AA99AC8291F94370EA924E78372CA0E6E15E7CE44EA9A6B80660ABAF40EB7886F65422CA574CD99AB5BD26008F370E16E999D8564940791693614A72F264078C218C33C1766C48ECC05D6F39B995380EFED351099378D5D5FB8C78D17DB2CBC7F8B26EDABB82532E9FBA0F7B264E739255448BDC80FADB6513ECB21E3FA996A4FFFBF8A008ECED85AE723B50425006AFCB257741A9125FA384FE7DE9E0935F0AC0E546597A04965B3663FCE82243A71D252D5248E54A0A6C84FC5F0CD81B074E57F3FD3729634A1696CFA0D7CE1273502254A604E55DCA139F58CCBCD847215068B9775E624490E66508DFBE5DCD868DD3064C8C0C1952F32831F826FE}`
)

func testDeleteFile(f string) {
	os.RemoveAll(f)
}

func TestError(t *testing.T) {
	t.Parallel()

	str := "value"
	err := &SAppError{str}
	if err.Error() != errPrefix+str {
		t.Error("incorrect err.Error()")
		return
	}
}

func TestGetPrivKey(t *testing.T) {
	t.Parallel()

	testDeleteFile(tcTmpPrivKeyPath)
	defer testDeleteFile(tcTmpPrivKeyPath)

	privKey, err := GetPrivKey(tcPrivKeyPath)
	if err != nil {
		t.Error(err)
		return
	}
	if privKey.ToString() != asymmetric.LoadPrivKeyChain(tcPrivKey).ToString() {
		t.Error("diff private keys")
		return
	}

	if _, err := GetPrivKey(tcInvalidPrivKeyPath); err == nil {
		t.Error("success get invalid private key")
		return
	}
	if _, err := GetPrivKey("./random/not_exist/path/57199u140291724y121291d1/priv.key"); err == nil {
		t.Error("success get private key with not exist directory")
		return
	}
	if _, err := GetPrivKey(tcTestdataDirPath); err == nil {
		t.Error("success get private key as directory")
		return
	}

	tmpPrivKey, err := GetPrivKey(tcTmpPrivKeyPath)
	if err != nil {
		t.Error(err)
		return
	}
	tmpPrivKeyX, err := GetPrivKey(tcTmpPrivKeyPath)
	if err != nil {
		t.Error(err)
		return
	}
	if tmpPrivKey.ToString() != tmpPrivKeyX.ToString() {
		t.Error("diff tmp private keys")
		return
	}
}
