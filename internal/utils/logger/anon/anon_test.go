package anon

import (
	"context"
	"net"
	"testing"
	"time"

	"github.com/number571/go-peer/pkg/crypto/asymmetric"
	"github.com/number571/go-peer/pkg/encoding"
	"github.com/number571/go-peer/pkg/logger"
	anon_logger "github.com/number571/go-peer/pkg/network/anonymity/logger"
	"github.com/number571/go-peer/pkg/network/conn"
	net_message "github.com/number571/go-peer/pkg/network/message"
)

var (
	_ conn.IConn = &tsConn{}
	_ net.Conn   = &tsNetConn{}
	_ net.Addr   = &tsAddr{}
)

type tsConn struct{}

func (p *tsConn) Close() error                                             { return nil }
func (p *tsConn) GetSettings() conn.ISettings                              { return nil }
func (p *tsConn) GetSocket() net.Conn                                      { return &tsNetConn{} }
func (p *tsConn) WriteMessage(context.Context, net_message.IMessage) error { return nil }
func (p *tsConn) ReadMessage(context.Context, chan<- struct{}) (net_message.IMessage, error) {
	return nil, nil
}

type tsNetConn struct{}

func (p *tsNetConn) Read(_ []byte) (n int, err error)   { return 0, nil }
func (p *tsNetConn) Write(_ []byte) (n int, err error)  { return 0, nil }
func (p *tsNetConn) Close() error                       { return nil }
func (p *tsNetConn) LocalAddr() net.Addr                { return &tsAddr{} }
func (p *tsNetConn) RemoteAddr() net.Addr               { return &tsAddr{} }
func (p *tsNetConn) SetDeadline(_ time.Time) error      { return nil }
func (p *tsNetConn) SetReadDeadline(_ time.Time) error  { return nil }
func (p *tsNetConn) SetWriteDeadline(_ time.Time) error { return nil }

type tsAddr struct{}

func (p *tsAddr) Network() string { return "tcp" }
func (p *tsAddr) String() string  { return "192.168.0.1:2000" }

const (
	tcService = "TST"
	tcHash    = "96cb1f0968adba001ebc216708a02c8d2817b1a77fad1206012c22716a9b130b"
	tcFmtLog  = "service=TST type=ENQRQ hash=96CB1F09...00000000 addr=35AA7E11...CFBAEFC7 proof=0000012345 size=1024B conn=192.168.0.1:2000"
)

func TestLoggerPanic(t *testing.T) {
	t.Parallel()

	logFunc := GetLogFunc()
	for i := 0; i < 3; i++ {
		testLoggerPanic(t, logFunc, i)
	}
}

func testLoggerPanic(t *testing.T, f logger.ILogFunc, n int) {
	defer func() {
		if r := recover(); r == nil {
			t.Error("nothing panics")
			return
		}
	}()
	switch n {
	case 0:
		f(struct{}{})
	case 1:
		logger := testNewAnonLogger()
		f(logger) // without type
	case 2:
		logger := testNewAnonLogger().WithType(255)
		f(logger) // with unknown type
	}
}

func TestLogger(t *testing.T) {
	t.Parallel()

	logger := testNewAnonLogger().
		WithType(anon_logger.CLogBaseEnqueueRequest)

	logFunc := GetLogFunc()
	if l := logFunc(logger); l != tcFmtLog {
		t.Log(l)
		t.Error("result fmtLog != tcFmtLog")
		return
	}
}

func testNewAnonLogger() anon_logger.ILogBuilder {
	privKey := asymmetric.LoadPubKey(tgPubKey)
	return anon_logger.NewLogBuilder(tcService).
		WithHash(encoding.HexDecode(tcHash)).
		WithProof(12345).
		WithSize(1024).
		WithPubKey(privKey.GetSignPubKey()).
		WithConn(&tsConn{})
}

const (
	tgPubKey = `PubKey{16554BC762BA49386735382333CC41E9E27F7BA4C6E0F61723E9381B4727003A2303C8B5DF7A1275F958656427AA15CCCF7AC1E902A3B83191A5EABC01DA0A02D4788D8438FF0543B6285C107CB9AEDA4910752D221A78BD44B8EBF193A63830EDEC7B83B34EE929143D381DB1EC8BE7E998F6263A69904558F6624F3A631B2937AEF78EF82BB681689636195E88E268632C185C1B8CEF51203CE7119519758135B4A263A5A624607F52111021656249658E35A26483BE4AB75635490962D33B49E52BBFE5AF61A019A2BA444C6213ABC9C8864794652256974919EE9B4D71411FD686187B783DE8290843EA7FFB9C066EA509CE517A7CB39E4E691B519CC0A32BCAF77B3AF736C760935C6F9728F2224F364B9043D8710F6C2837FCBD2E895290583BE6EB440E23192BC3219D66483F9A790F272EF5D135A7A84689786ABE7ABA6DE38D69DC930F3B2B459498B0BB0FDC93B517C661FDFBBEBBB94D72882582C30D716C8376A25335A90B097A3B93167CCF1723C75871DD66791852374F588B9E7A9DCBA423A92BCE90A10453E08496F355F0E65DA1932664B046AB567F55605CAC597000F123C3AB1F19817214284B04C19A21D9B325E5CE4BC213D3223341386494B34E2C20875832619A5114ECBCC9FBA155EC3304D07A7FAA26079DA8431A1474FBACC1C96C3C33639413911B501B87DAF70DCA54B9FC2B8E64E83BCFEC2885356780989C28068F1C726EB8FB839E03C9CF42478BBC68D8E732020C4B4914AAAF12C7CC7376A00805EE341DC4D51176C9CB93319A96781EABA250FB9BC559694C9CE679208661CDB15C1471B7AC1CC402654037C238959A4D9C0908DFA456D8E861312C4A3A5514DE66BF9CB0605A4AAFB152A446B874C6A688836A478D14C742795D511458894260B96786FDD718C7AB7DCE167F8077921323A82BD7B5FEE9026DBB3EEC3B0584AA04DA226333B9982595BA077A8FE791CF3E3904382317BC5B1A94350178170BE3F985F6A09D9B8CC01263A9AED0917EFC659A856390170A78A977B0B03895A4CC11994191BB2B12230CD3B6310127ADE984A86B104FCD8B4026E5B8E9B4398BEC5A99027789E59DC8B4CA0EFA6108F206C3F1051AE8BA9D7CA0B49ABB9F8B0157EB7DD48B79511AC82EBBC6DE836146777DFCA94078322B1C2955CEA432BFE98B34F58EF3494BDCC446A289AA2FD50C14794FDDCA13AF8158238CA1419ACDEA8763143B2577C7C7B868C66C5C41948111C77B4E67B5B86C68B756061FDF3C64D1A97838E09B6728B7586B48275CA26B4A7973D08167DAB630102AB6F390324574EECB6900394AEAD619377C7B3E90B1C47111236474B1141CC14184C0527DFCC2C5ED7C5558D36C54D26DDF6C476A023BAEC9017B9987B5EA820D5C847FAB2B7F276D269A83DA356C8ED5A212FC60C06889AA3991A2535101337A396C4998D221B8041BB000AAD55097BC714440AB0B0572B099D4AAB15213899408AEF33D4FD21B5A725CBF840685127D9B608D8A106B6DFB273338C04CC81DCEB79049693F4ED26CB4587A85FCC557F244DDD98167864E70404073C06ABA428D0CEA6DEC2C1819DB1EB059ACC78149EB0766CB91675071738A921743FA3C29D8947A5C5744FA337D7322325A85E5858F1BE9A0848769B25C17253B2C5111A0E3603FB021788D1C24357B629D745BD8E40B789A338E6B1ACAE4826597342B5672F754361BCA2F99E290EE6B565E18BB5DF2083DBC366823087D65240C6B8C9114B0D5EB0BBF796D46E2995BB6267FF5AD2AF30326614B4EF9489E783F97F09AAA77A2DB644F4D5C0070F8A971C0057133286B2B45D223C75FF213A662CC837B0A59727CEC445C11123A1AC56531495F2B3A8AF7AB4A2D920AC2834B7B82C32BC6BDD06762CEE18C398C49879128EA28BAD8B64FBC7170AC9C25D5414EC6E87F91A93675D7A27248910528A5D7895C1D9219590B4DF5E20879EA9865522F054CC27442689201CC9795A5F9B1518142571A893D755162FABC5A5C14AE4DD0A4819B6CD1D08DEB48CD3BCB64F3C6A74854608B839265F54F585057C56A5A0BE8592D9C0B0B9CC581A22ED00992A75646C58459C5D1588D87B67A2CA26E79C7BF504750CA89B3CBC0BB25B900F150051C902B1A0CDCD25B1F63C6D33BC2AAF04017C36A47252332D8E6104143D0C1FC1B18115F3C0DDB62843A1FBA094F8CA4378D4F6304B680BC5DF825B00820EA8515B6F64ADD5BD66D9BCC6FA9C9E52340D128638E404D9B1DA2730A6B676D6C5BED2EAC7ADD239EC750FE81462B8F9D0318B8DF34A92FD49D6D75BC2E3A4A1250C5638400638A458C53057ED64C7EE927FAA48508B40F8173854B93E2E12CAC4DF4117B89D2B82F5187BA6B0235A8C08A2929AC0982DF076C47277F5691C76A3CBE2EF07C415CD12C61E553972F5A572FCB82BA164B15E06013E5180E5BEC143838D96C9D003D2FEDCFBC7A6C1153996B0BE5F2FC33B9334D984BE743F87B5FFBE2B0AE0E5B467F29634A4DED9F8F84B83DFD91F55E53740B1DF0DC853F7AC2B504997B524C5FEE50C04579682FC68A101E883DE944CD84861073D034B288CCCC0E7FCEDE42A2A5746161B61466605721192B0CBF1620ED76341D3334E327DBE42AB05514B1CAD2498C592E3ADF5D0BCC7EA6AB5AFF800EA8599DD6B45962856BD45D734F2CF9837CE59E06E049BD2A11E80AB69D60BAC9545FD7637F28F5DF2A59D677C07FD8FDCA904E31DD2F1FB46483735F063EFAF5446604A9F0226582E076EE2B11BABDC8A78A761EA470B473F262F4A65545A84748845B32D6A39B922F17E104B1B07ADA5A803EDB5ABFD61AB4780FF501287D97C4484E12FC7FEC5B58DCC4FD9D1C80F6D9EC8D1FF2452DF8A5DC74207024393E7ED26D1BC1E35EB364C3F3C9E3902AC64A44C125FF0ED12227778DF99545F9302D1270CD10CB53A46A82C428AA7EFA43F7599CB9CC3ADBC453D8791B51B863F50132797ED7E63723306C8AC8CED8F39F4FF0C08B24BBEF9F66AE3EAF4F149A5527D726F6B193A37BC90B9EEA5974EE2BED40B556A9BAC96C97C866904D9AEB2D65C34EF57DD5DEF1B3FF467408F4DC001EC8667341930474CFBEDF0DC2D4EAB597F6B83D6D02BB7E881EE7FC1534E77D94E1220E28633FBF37A92574607AF6B8EEBF3C0988DDF2937C008B02B6223FEE21A30BCA91034D04AC02BCE74CBF33028A3015DEDD0BBCB3A95EB637F97F4282D3E11F7B3C8C656188CC2DB92EDAC7A496535D8CA43495488B8ECF333013216D61426072615499EF3E470838D794D5B01771CB6F755B8075D54B7906179EC93FEAB9B08C0280951A2D9A53E5DFC992D0279495648208FD057569894F623551480EF18719BEDDE9955EEE43F2EDDD53B1236233774FD5D13D5B5CF7D685E1C576FFE0BC4644888ACF8893816015FDCD7A178FC4F5B832D22BB89524F018E81E1FB7AAEE7EA52E91B7984BA1BF41F672353D8875E644BD1BFC6CE0FD771FC16B3077F12E96F0DA051333965B13BE1B20C9C8EE41A8794CEB96E6D4F3FFC5C610514A7C070684F987144593DAAAEAD796AC741CD0CE3BF825B1F0EFC09AD5DAF01507B7F84F21297E7377EFA605B915AC747F655EBD2FFABD5723551A0A57C2EFE229F01255E775242A0ED45B6809AEBA8E91CE523B322176F9DB9C61FC4E9A5C17B3839B52517E7D89FC88BD1C74A945BFB66EB539120D6552469780DE8AF47ACA588A31A1B9F15D7A3B0BEF7349F92043A0DCE26A1A308EF0F219710CA39A6F30DB168BCF9FF1F67634D93C4E2D8DBE496AA12043A8924008D4D09ABF1FAE691A1868656F62A6384014F7C3BAF185AB6455719876E77F3B8A2F753F5B10C91CE80872FD1ADD63C548D2B11C235FFBD64DDA1E4DAFE2024721EE73B1C6F4955DC588F9A05230CDDA8D60F744456FBF5E348DA1508D4155DF40F5A58378FA3DDB4E0DF7532F8C914EDF31E1366B02853002F2A626BE3B77D3B3F37F8864D66DDB29A8183FC9A047DFD3BF2AFF8E17A017202DD80DC4730135C6307802F68A7A5F97FE1BEAE8D38242B622542CFE9E911BF2824D7FD39C18D292D5E18F38155487BB9A6987053229B948D3428DEABD9607A5132FB9A2CA9AB2FA040796A10430ADFC1B43ECFF6536245297C45E8E31E51938D498056D6ACE094E0CBF50E76329CDB4D4F3551C65F25FBDC121AB5142018100078FBE5359C40180241813FD5E4AD2FA5EFA4D53452341DA67D459B27E905E681130923985F3B925EA4AAD7FB88C00ED9DCF85F985C91FAE47A097F302BA7BA85FAF92EED0893112B0AC1547FA10CAE59833B8220164A0508DA356F35C08F5D39D3668AE650B0EFE1B7FE1763BFE388FEA3F26147CB6F0BACAD38888F09CFC42E5F7AB74AD6AABE894E11110A85398756222662EE300A321765A7181C32C5E0BCABB75E3266A0C2C88DE3EFBA22116EFD9A95D643786CB6F79FF8E0F1F7F07388798B665C7B7A4776B01D113A749DED3060E56E441953FFFFC4DD7BC2372956B0B7DC9C4247198EBF59E20D72658C629543B3352AF45BEEEAE5A5365ED634A9BF132C7351C6CBA283ADEA816A692440764091979EBC5E6A2230F09D9A7861F98A7DAF7FA221A100AA5D63B74D0A65FA75D87B3B98982A9AA8F31F6C98489274112556BF20D2127B96D7B9444CE0CF3D3EDCB56726E0BE39AB9B0B2AE608C0C9102BDDF12556A6D23BE18AEDC3F03296D749E61FB65C35AF659B938192A8D39DCB04D81BA2ED109BDED22D4DD06156234320622A9B186DAD1584B7B4C9022BF72DA019707C86A964F01F83064740EF454820DF46E8B6BED11AB1836F4A7D87B7F66D6C1998320EA5994A84A1F8859EBCEC97AA430D68485E30C0DE8DC4FAA02E6261897A03E12B7D308E78B34DBA1156E73B0BA30CCBD08125B86A9A3BB76674CBE74DEB95ACCDBFA58342F639BBA8F534FCE7331D1EF98BEA31A930BB3439742FB2132FDB79CE1744084EA9E100F304B01F7F15E7722974447D3103AD71527FBB6384B8D6B746F12A53944AAE5C5051EFB1CD125AD618A39ECA78C540EF623B03C8C6D823D818BF74FA3B9047014E0FBDC892058BAD53FB245C7673BE01CA129030D8D8FCEA01A86FF36076A83EAA6D07A9F6C5805DE41F2A7DCF745EFC2329DB6409E520E113D9A42957D68D98497B747C9673C5A150F37734B58BDD314A49CC6B12275C93FE27D7B76F1AF00F6A5E38CB9ACDEB5A7A9E571AF4C62A4CC67D2C9F4987CBA49C15B0DA2E8EF84F0782C3D3D862789BFD4BC571135225D0A4389C0F15CA9B0A64E6C53DE10B51E6BFCE0C0232C9CF870E0CE8A3A5970D95D44602A0EE32FDFCAF93B7F12B311F5459FDE58B4AED813ADA18B2339171BD9C1488555765AEDC9B7162D30006EA978B7B405D68B28AD83AD78A7898012D1DC88B3793AA4A688BE0935FEF92D88CC9662D11AE7F3CED5C4BAD781AC4145C4263689B311B3994DD67D453F4F06F7D9952850A6DC131333F6AFF8CEFC496573D34D5B153B6FE5DB7807631F7C4DC8E551D87825A22F4038A6F4A31786736E4E5361937C46F6F8CA69317141DBC9704FA2C9FCF7057CC62069203B3F2FD5A2670D637F85DF8EE377E4A9128DF9EDF8BAAF9A20F10B1FFF3201459025CCEC305FBF872F9BE7E31577FF32C4AE906C067E2D3D316EAF2EE5750950AC1E782D6D720D6BDE20AB573C31A69873A36AEDDCACD609A2836FDF8C52B8728706C87F0568E6F915B4D033EC7EE646E55CB090C035BF1AE048CF7292BBF58EBA00CCBB726FDE3FEF77D6AADD325FE05FBE65A5431054DE7B246F0ACF78652AA6C678E7D7017EC2DE7D235C4A6812E1222402F5F638E19C9CD52016324149517F}`
)
